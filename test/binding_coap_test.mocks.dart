// Mocks generated by Mockito 5.0.17 from annotations
// in dart_wot/test/binding_coap_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i4;

import 'package:dart_wot/src/definitions/thing_description.dart' as _i2;
import 'package:dart_wot/src/scripting_api/exposed_thing.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeThingDescription_0 extends _i1.Fake implements _i2.ThingDescription {
}

/// A class which mocks [ExposedThing].
///
/// See the documentation for Mockito's code generation for more information.
class MockExposedThing extends _i1.Mock implements _i3.ExposedThing {
  MockExposedThing() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.ThingDescription get thingDescription =>
      (super.noSuchMethod(Invocation.getter(#thingDescription),
          returnValue: _FakeThingDescription_0()) as _i2.ThingDescription);
  @override
  _i4.Future<void> expose() =>
      (super.noSuchMethod(Invocation.method(#expose, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i4.Future<void>);
  @override
  _i4.Future<void> destroy() =>
      (super.noSuchMethod(Invocation.method(#destroy, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i4.Future<void>);
  @override
  void setPropertyReadHandler(String? name, _i3.PropertyReadHandler? handler) =>
      super.noSuchMethod(
          Invocation.method(#setPropertyReadHandler, [name, handler]),
          returnValueForMissingStub: null);
  @override
  void setPropertyWriteHandler(
          String? name, _i3.PropertyWriteHandler? handler) =>
      super.noSuchMethod(
          Invocation.method(#setPropertyWriteHandler, [name, handler]),
          returnValueForMissingStub: null);
  @override
  void setPropertyObserveHandler(
          String? name, _i3.PropertyReadHandler? handler) =>
      super.noSuchMethod(
          Invocation.method(#setPropertyObserveHandler, [name, handler]),
          returnValueForMissingStub: null);
  @override
  void setPropertyUnobserveHandler(
          String? name, _i3.PropertyReadHandler? handler) =>
      super.noSuchMethod(
          Invocation.method(#setPropertyUnobserveHandler, [name, handler]),
          returnValueForMissingStub: null);
  @override
  _i4.Future<void> emitPropertyChange(String? name) =>
      (super.noSuchMethod(Invocation.method(#emitPropertyChange, [name]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i4.Future<void>);
  @override
  void setActionHandler(String? name, _i3.ActionHandler? handler) =>
      super.noSuchMethod(Invocation.method(#setActionHandler, [name, handler]),
          returnValueForMissingStub: null);
  @override
  void setEventSubscribeHandler(
          String? name, _i3.EventSubscriptionHandler? handler) =>
      super.noSuchMethod(
          Invocation.method(#setEventSubscribeHandler, [name, handler]),
          returnValueForMissingStub: null);
  @override
  void setEventUnsubscribeHandler(
          String? name, _i3.EventSubscriptionHandler? handler) =>
      super.noSuchMethod(
          Invocation.method(#setEventUnsubscribeHandler, [name, handler]),
          returnValueForMissingStub: null);
  @override
  void setEventHandler(String? name, _i3.EventListenerHandler? handler) =>
      super.noSuchMethod(Invocation.method(#setEventHandler, [name, handler]),
          returnValueForMissingStub: null);
  @override
  _i4.Future<void> emitEvent(String? name, Object? data) =>
      (super.noSuchMethod(Invocation.method(#emitEvent, [name, data]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i4.Future<void>);
}
